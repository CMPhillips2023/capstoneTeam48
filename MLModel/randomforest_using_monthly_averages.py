# -*- coding: utf-8 -*-
"""RandomForest using Monthly Averages.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1M9QGKNSFjuJSQF7VJMzsxuYCW6-MEGsb
"""

import pandas as pd
import numpy as np
from google.colab import drive
drive.mount('/content/drive/')

df = pd.read_csv('/content/drive/MyDrive/404 STUFF/full_month_data.csv')
df['SqMiles'] = df['Acres'] / 640
df['IG_DATE'] = pd.to_datetime(df['IG_DATE'])

# Set the threshold for longitude
threshold = -110

# Create 'region' column based on 'longitude' values
df['Region'] = np.where(df['Longitude'] > threshold, 'East', 'West')
east_df = df[df['Region'] == 'East']
west_df = df[df['Region'] == 'West']
east_df = east_df[east_df['SqMiles'] < 50]
west_df = west_df[west_df['SqMiles'] < 100]

df = pd.concat([west_df, east_df])

df['State'] = df['Fire_ID']
df['State'] = df['State'].str.replace('\d+', '', regex=True)
df.drop(columns='Fire_ID', inplace=True)
df = df[df.State != 'AK']
df = df[df.State != 'HI']
df = df[df.State != 'PR']

df['Day'] = df['IG_DATE'].dt.day_of_year

df.head()

df = pd.get_dummies(data=df, columns=['Region'])

df.head()

def categorize_acres(acres):
    if acres < 1000:
        return 1  # Small
    elif 1000 <= acres <= 10000:
        return 2  # Medium
    elif 10000 < acres <= 50000:
        return 3  # Large
    else:
        return 4  # Very Large

df['Category'] = df['Acres'].apply(categorize_acres)

df.head()

df.dropna(inplace=True)

X = df.drop(columns=['IG_DATE', 'Acres', 'SqMiles', 'State', 'Category'])
y = df.Category

from sklearn.preprocessing import  StandardScaler, MinMaxScaler
from sklearn.model_selection import train_test_split

scaler = StandardScaler()

# Split X and y into training and test set in 80:20 ratio
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

from sklearn.ensemble import RandomForestClassifier

# Defining the RandomForestClassifier
clf = RandomForestClassifier(n_estimators=100, random_state=42, verbose=1)
clf.fit(X_train_scaled, y_train)

# Checking the training and testing accuracy again
train_accuracy = clf.score(X_train, y_train)
test_accuracy = clf.score(X_test, y_test)

train_accuracy, test_accuracy